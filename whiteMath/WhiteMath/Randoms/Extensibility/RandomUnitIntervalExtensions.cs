using WhiteMath.Calculators;

namespace WhiteMath.Randoms.Extensibility
{
	public static class RandomUnitIntervalExtensions
	{
		/// <summary>
		/// Makes use of an <c>IRandomFloatingPoint&lt;<typeparamref name="T"/>&gt;</c>
		/// instance and enables it to produce values in a constant, pre-set range (i.e. wraps it
		/// around to make it an as an <c>IRandomUnbounded&lt;<typeparamref name="T"/>&gt;</c> object).
		/// </summary>
		/// <remarks>
		/// Because the wrapper object will use multiplication scaling to produce random numbers, 
		/// please notice that for bigger intervals the quality of the distribution
		/// may seriously suffer due to scale irregularity of some numeric types, e.g. <c>double</c>.
		/// </remarks>
		/// <typeparam name="T">The type of numbers generated by <paramref name="generator"/>.</typeparam>
		/// <typeparam name="C">A calculator type for the <typeparamref name="T"/> type.</typeparam>
		/// <param name="generator">An <c>IRandomFloatingPoint&lt;<typeparamref name="T"/>&gt;</c> instance.</param>
		/// <param name="minimum">The lower inclusive boundary for generated values.</param>
		/// <param name="maximum">The upper exclusive boundary for generated values.</param>
		/// <returns>
		/// An <c>IRandomBounded&lt;<typeparamref name="T"/>&gt;</c> object that makes use 
		/// of <paramref name="generator"/> and produces values in arbitrary ranges by scaling.</returns>
		public static IRandomUnbounded<T> AsUnboundedGenerator<T, C>(
			this IRandomUnitInterval<T> generator,
			T minimum,
			T maximum)
			where C : ICalc<T>, new()
			=> new RandomUnitIntervalToUnboundedWrapper<T, C>(generator, minimum, maximum);

		/// <summary>
		/// Makes use of an <see cref="IRandomUnitInterval{T}"/> instance and enables it to 
		/// produce values in an arbitrary range, making it an <see cref="IRandomBounded{T}"/> object.
		/// </summary>
		/// <remarks>
		/// Because the wrapper object will use multiplication scaling to produce random numbers, 
		/// please notice that for bigger intervals the quality of the distribution
		/// may seriously suffer due to scale irregularity of some numeric types, e.g. <c>double</c>.
		/// </remarks>
		/// <typeparam name="T">The type of numbers generated by <paramref name="gen"/>.</typeparam>
		/// <typeparam name="C">A calculator type for the <typeparamref name="T"/> type.</typeparam>
		/// <param name="gen">An <c>IRandomFloatingPoint&lt;<typeparamref name="T"/>&gt;</c> instance.</param>
		/// <returns>
		/// An <c>IRandomBounded&lt;<typeparamref name="T"/>&gt;</c> object that makes use 
		/// of <paramref name="gen"/> and produces values in arbitrary ranges by scaling.</returns>
		public static IRandomBounded<T> AsBoundedGenerator<T, C>(this IRandomUnitInterval<T> gen)
			where C : ICalc<T>, new()
		{
			return new RandomUnitIntervalToBoundedWrapper<T, C>(gen);
		}
	}
}
