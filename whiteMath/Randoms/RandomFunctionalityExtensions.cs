using System;

using whiteMath.Calculators;

using whiteStructs.Conditions;

namespace whiteMath.Randoms
{
    // -----------------------------------------------------------
    // --------------------- delegates ---------------------------

    /// <summary>
    /// Represents a method which is able to generate
    /// random numbers in the whole range of the <typeparamref name="T"/>
    /// type.
    /// </summary>
    /// <typeparam name="T">The type of numbers generated by the method.</typeparam>
    /// <returns>A random value from all of the possible finite values of numeric type <typeparamref name="T"/>.</returns>
    public delegate T UnboundedGenerator<T>();

    /// <summary>
    /// Represents a method which is able to generate
    /// non-negative random numbers smaller than the specified
    /// value.
    /// </summary>
    /// <typeparam name="T">The type of numbers generated by the method.</typeparam>
    /// <param name="maxValue">An exlusive upper boundary for generated numbers.</param>
    /// <returns>A non-negative random value which is smaller than <paramref name="maxValue"/>.</returns>
    public delegate T UpperBoundedGenerator<T>(T maxValue);

    /// <summary>
    /// Represents a method which is able to generate
    /// random numbers in the specified range.
    /// </summary>
    /// <typeparam name="T">The type of numbers generated by the method.</typeparam>
    /// <param name="minValue">A lower inclusive boundary for generated numbers.</param>
    /// <param name="maxValue">An upper exclusive boundary for generated numbers.</param>
    /// <returns>A random value in the interval <c>[minValue; maxValue)</c></returns>
    public delegate T BoundedGenerator<T>(T minValue, T maxValue);

    /// <summary>
    /// Represents a method which accepts a <c>byte[]</c>
    /// buffer and fills it with random values.
    /// </summary>
    /// <param name="buffer">An array to be filled with random values.</param>
    public delegate void ByteGenerator(byte[] buffer);

    // -------------------------------------------------------------------------
    // --------------------- end of declaration zone ---------------------------


    /// <summary>
    /// This class provides methods for extending functionality of
    /// existing random generators by making use of their methods
    /// to create new ones.
    /// </summary>
    /// <see cref="IRandomFloatingPoint&lt;T&gt;"/>
    /// <see cref="IRandomBytes"/>
    /// <see cref="IRandomUnbounded&lt;T&gt;"/>
    /// <see cref="IRandomBounded&lt;T&gt;"/>
    public static class RandomFunctionalityExtensions
    {
        // ------------------------------------------------------------------------------
        // ----------------------------- Floating-point generator extensions ------------

        /// <summary>
        /// Makes use of an <c>IRandomFloatingPoint&lt;<typeparamref name="T"/>&gt;</c>
        /// instance and enables it to produce values in an arbitrary range (i.e. wraps it
        /// around to make it an <c>IRandomBounded&lt;<typeparamref name="T"/>&gt;</c> object).
        /// </summary>
        /// <remarks>
        /// Because the wrapper object will use multiplication scaling to produce random numbers, 
        /// please notice that for bigger intervals the quality of the distribution
        /// may seriously suffer due to scale irregularity of some numeric types, e.g. <c>double</c>.
        /// </remarks>
        /// <typeparam name="T">The type of numbers generated by <paramref name="gen"/>.</typeparam>
        /// <typeparam name="C">A calculator type for the <typeparamref name="T"/> type.</typeparam>
        /// <param name="gen">An <c>IRandomFloatingPoint&lt;<typeparamref name="T"/>&gt;</c> instance.</param>
        /// <returns>
        /// An <c>IRandomBounded&lt;<typeparamref name="T"/>&gt;</c> object that makes use 
        /// of <paramref name="gen"/> and produces values in arbitrary ranges by scaling.</returns>
        public static IRandomBounded<T> TreatAsBoundedGenerator<T, C>(this IRandomFloatingPoint<T> gen) where C : ICalc<T>, new()
        {
            return new ___RandomFP_BoundedWrapper<T, C>(gen);
        }

        /// <summary>
        /// Makes use of an <c>IRandomFloatingPoint&lt;<typeparamref name="T"/>&gt;</c>
        /// instance and enables it to produce values in a constant, pre-set range (i.e. wraps it
        /// around to make it an as an <c>IRandomUnbounded&lt;<typeparamref name="T"/>&gt;</c> object).
        /// </summary>
        /// <remarks>
        /// Because the wrapper object will use multiplication scaling to produce random numbers, 
        /// please notice that for bigger intervals the quality of the distribution
        /// may seriously suffer due to scale irregularity of some numeric types, e.g. <c>double</c>.
        /// </remarks>
        /// <typeparam name="T">The type of numbers generated by <paramref name="gen"/>.</typeparam>
        /// <typeparam name="C">A calculator type for the <typeparamref name="T"/> type.</typeparam>
        /// <param name="gen">An <c>IRandomFloatingPoint&lt;<typeparamref name="T"/>&gt;</c> instance.</param>
        /// <param name="minimum">The lower inclusive boundary for generated values.</param>
        /// <param name="maximum">The upper exclusive boundary for generated values.</param>
        /// <returns>
        /// An <c>IRandomBounded&lt;<typeparamref name="T"/>&gt;</c> object that makes use 
        /// of <paramref name="gen"/> and produces values in arbitrary ranges by scaling.</returns>
        public static IRandomUnbounded<T> TreatAsUnboundedGenerator<T, C>(this IRandomFloatingPoint<T> gen, T minimum, T maximum) where C : ICalc<T>, new()
        {
            return new ___RandomFP_UnboundedWrapper<T, C>(gen, minimum, maximum);
        }

        /// <summary>
        /// This class wraps around a <c>RandomFloatingPoint&lt;<typeparamref name="T"/>&gt;</c>
        /// to treat it as an unbounded generator in a certain interval 
        /// (absolute minimum and absolute maximum values should be provided).
        /// </summary>
        /// <remarks>
        /// Please notice that for bigger intervals the quality of the distribution
        /// may seriously suffer due to scale irregularity of some numeric types, e.g. <c>double</c>.
        /// </remarks>
        /// <typeparam name="T">The type of generated numbers.</typeparam>
        /// <typeparam name="C">A calculator type for the <typeparamref name="T"/> type.</typeparam>
        private class ___RandomFP_BoundedWrapper<T, C> : IRandomBounded<T> where C : ICalc<T>, new()
        {
            public IRandomFloatingPoint<T> Generator { get; private set; }

            /// <summary>
            /// Returns the next random number in the specified interval.
            /// </summary>
            /// <remarks>
            /// Please notice that for bigger intervals the quality of the distribution
            /// may seriously suffer due to scale irregularity of some numeric types, e.g. <c>double</c>.
            /// </remarks>
            /// <param name="min">The lower inclusive bound of generated numbers.</param>
            /// <param name="max">The upper exclusive bound of generated numbers.</param>
            public T Next(T min, T max)
            {
				Condition
					.Validate(Numeric<T, C>.Calculator.GreaterThan(max, min))
					.OrArgumentOutOfRangeException("The lower boundary should be less than the upper boundary.");
                
                Numeric<T, C> minValue = min;
                Numeric<T, C> maxValue = max;

                return minValue + Generator.NextInUnitInterval() * (maxValue - minValue);
            }

            /// <summary>
            /// Initializes the wrapper instance with a floating-point generator.
            /// </summary>
            /// <param name="gen">A floating-point generator for the type <typeparamref name="T"/></param>
            public ___RandomFP_BoundedWrapper(IRandomFloatingPoint<T> generator)
            {
				Condition.ValidateNotNull(generator, nameof(generator));

                this.Generator = generator;
            }
        }

        /// <summary>
        /// This class wraps around a <c>RandomFloatingPoint&lt;<typeparamref name="T"/>&gt;</c>
        /// to treat it as an unbounded generator in a certain interval 
        /// (absolute minimum and absolute maximum values should be provided).
        /// </summary>
        /// <remarks>
        /// Please notice that for bigger intervals the quality of the distribution
        /// may seriously suffer due to scale irregularity of some numeric types, e.g. <c>double</c>.
        /// </remarks>
        /// <typeparam name="T">The type of generated numbers.</typeparam>
        /// <typeparam name="C">A calculator type for the <typeparamref name="T"/> type.</typeparam>
        private class ___RandomFP_UnboundedWrapper<T, C> : IRandomUnbounded<T> where C : ICalc<T>, new()
        {
            /// <summary>
            /// Gets a floating-point number generator which is internally used 
            /// to produce numbers in the <c>[0; 1)</c> interval.
            /// </summary>
            public IRandomFloatingPoint<T> Generator { get; private set; }

            /// <summary>
            /// Gets the lower boundary of generated numbers.
            /// This boundary is inclusive.
            /// </summary>
            public Numeric<T, C> Minimum { get; private set; }

            /// <summary>
            /// Gets the upper boundary for generated numbers.
            /// This boundary is exclusive.
            /// </summary>
            public Numeric<T, C> Maximum { get; private set; }

            /// <summary>
            /// Returns the next random number in the <c>[AbsoluteMinimum; AbsoluteMaximum)</c> interval.
            /// </summary>
            /// <remarks>
            /// Please notice that for bigger intervals the quality of the distribution
            /// may seriously suffer due to scale irregularity of some numeric types, e.g. <c>double</c>.
            /// </remarks>
            public T Next()
            {
                return Minimum + Generator.NextInUnitInterval() * (Maximum - Minimum);
            }

            /// <summary>
            /// Initializes the wrapper instance with a floating-point generator
            /// and a numeric interval.
            /// </summary>
            /// <param name="gen">A floating-point generator.</param>
            /// <param name="minimum">The lower inclusive boundary for generated numbers.</param>
            /// <param name="maximum">The upper exclusive boundary for generated numbers.</param>
            public ___RandomFP_UnboundedWrapper(IRandomFloatingPoint<T> generator, T minimum, T maximum)
            {
				Condition.ValidateNotNull(generator, nameof(generator));
				Condition
					.Validate(Numeric<T, C>.Calculator.GreaterThan(maximum, minimum))
					.OrArgumentOutOfRangeException("The lower boundary should be less than the upper boundary.");
				
                this.Generator = generator;
                this.Minimum = minimum;
                this.Maximum = maximum;
            }
        }

        /// <summary>
        /// Returns a delegate that is able to generate random byte 
        /// sequences on the basis of random <c>int</c> generator delegate.
        /// </summary>
        /// <param name="intGenerator">A delegate which returns a random integer number, recommended to cover the whole range <c>[int.MinValue; int.MaxValue]</c>.</param>
        /// <returns>A delegate that wraps around the <paramref name="intGenerator"/> to produce random byte sequences.</returns>
        public static ByteGenerator CreateNextBytes(UnboundedGenerator<int> intGenerator)
        {
            return delegate(byte[] array)
            {
                for (int i = 0; i < array.Length; i += 4)
                {
                    int nextInt = intGenerator();

                    for (int j = i; j < i + 4 && j < array.Length; j++)
                    {
                        array[j] = (byte)(nextInt & 0xFF);
                        nextInt >>= 8;
                    }
                }
            };
        }

        /// <summary>
        /// Returns a delegate that is able to generate random byte sequences 
        /// on the basis of a random <see cref="long"/> generator.
        /// </summary>
        /// <param name="longGenerator">A delegate which returns a random long number, recommended to cover the whole range <c>[long.MinValue; long.MaxValue]</c>.</param>
        /// <returns>A delegate that wraps around the <paramref name="longGenerator"/> to produce random byte sequences.</returns>
        public static ByteGenerator CreateNextBytes(UnboundedGenerator<long> longGenerator)
        {
            return delegate(byte[] array)
            {
                for (int i = 0; i < array.Length; i += 8)
                {
                    long nextLong = longGenerator();

                    for (int j = i; j < i + 8 && j < array.Length; j++)
                    {
                        array[j] = (byte)(nextLong & 0xFF);
                        nextLong >>= 8;
                    }
                }
            };
        }

        /// <summary>
        /// На основе генератора случайных байтов возвращает 
        /// генератор uint, который дает числа не больше заданного значения.
        /// </summary>
        private static Func<uint, uint> ___CreateNextUIntInclusive(ByteGenerator byteGenerator)
        {
            return delegate(uint maxValue)
            {
                // maxvalue - IS INCLUSIVE.

                if (maxValue == 0)
                    return 0;

                ulong savedMaxValue = maxValue;

                int wholeBytes = 0;     // количество байт, которое можно ничтоже сумняшеся заполнять полностью
                int tailBits = 0;       // а вот эту штучку полностью нельзя

                // ON DEBUG
                // Console.WriteLine(BitConverter.ToString(BitConverter.GetBytes(maxValue)));

                // 10000000|100000000|       257[10] 
                // 00101011|111111111|       X[10]

                while (maxValue > 0)
                {
                    ++tailBits;

                    if (tailBits == 8)
                    {
                        ++wholeBytes;
                        tailBits = 0;
                    }

                    maxValue >>= 1;
                }

            REPEAT:

                byte[] buffer = new byte[4];
                byteGenerator(buffer);

                // Все старшие разряды, 
                // идущие больше целого числа байтов,
                // должны быть занулены.

                for (int i = wholeBytes + 1; i < 4; i++)
                    buffer[i] = 0;

                if (wholeBytes < 4)
                {
                    if (tailBits > 0)
                    {
                        // tailbits = 1 --> mask = 00000001
                        // tailbits = 3 --> mask = 00000111

                        byte mask = 1;

                        for (int j = 1; j < tailBits; j++)
                        {
                            mask <<= 1;
                            mask += 1;
                        }

                        buffer[wholeBytes] &= mask;
                    }
                    else
                        buffer[wholeBytes] = 0;
                }

                uint sampledValue = BitConverter.ToUInt32(buffer, 0);

                if (sampledValue >= savedMaxValue)
                    goto REPEAT;

                return sampledValue;
            };
        }

        /// <summary>
        /// Returns a delegate that is able to generate random
        /// <c>uint</c> numbers in the whole range of <c>uint</c> numeric type.
        /// </summary>
        /// <param name="byteGenerator">A delegate that fills the passed byte array with random values.</param>
        /// <returns>
        /// A delegate that wraps around the <paramref name="byteGenerator"/> to produce random 
        /// <c>uint</c> values in the whole range of <c>uint</c> numeric type.
        /// </returns>
        public static UnboundedGenerator<uint> CreateNextUIntUnbounded(ByteGenerator byteGenerator)
        {
            return delegate
            {
                byte[] buffer = new byte[4];
                byteGenerator(buffer);

                return BitConverter.ToUInt32(buffer, 0);
            };
        }

        /// <summary>
        /// Returns a delegate that is able to generate random
        /// <c>uint</c> numbers which are strictly smaller than the specified value.
        /// </summary>
        /// <param name="byteGenerator">A delegate that fills the passed byte array with random values.</param>
        /// <returns>
        /// A delegate that wraps around the <paramref name="byteGenerator"/> to produce random <c>uint</c> values 
        /// which are strictly smaller than the argument passed to the delegate.
        /// </returns>
        public static UpperBoundedGenerator<uint> CreateNextUIntUpperBounded(ByteGenerator byteGenerator)
        {
            Func<uint, uint> nextULongInclusive = ___CreateNextUIntInclusive(byteGenerator);

            return
                maxValue => nextULongInclusive(maxValue - 1);
        }

        /// <summary>
        /// Returns a delegate that is able to generate random
        /// <c>uint</c> numbers in an arbitrary range.
        /// </summary>
        /// <param name="byteGenerator">A delegate that fills the passed byte array with random values.</param>
        /// <returns>A delegate that wraps around the <paramref name="byteGenerator"/> to produce random <c>uint</c> values 
        /// in the specified range.</returns>
        public static BoundedGenerator<uint> CreateNextUIntBounded(ByteGenerator byteGenerator)
        {
            Func<uint, uint> nextUIntInclusive = ___CreateNextUIntInclusive(byteGenerator);

            return
                (minValue, maxValue) => minValue + nextUIntInclusive(maxValue - minValue - 1);
        }

        // ---------------------------
        // ------- INT ---------------
        // ---------------------------

        /// <summary>
        /// Returns a delegate that is able to generate random
        /// <c>int</c> numbers in an the whole range of <c>int</c> numeric type.
        /// </summary>
        /// <param name="byteGenerator">A delegate that fills the passed byte array with random values.</param>
        /// <returns>
        /// A delegate that wraps around the <paramref name="byteGenerator"/> to 
        /// produce random <c>int</c> values in the whole range of <c>int</c> numeric type.
        /// </returns>
        public static UnboundedGenerator<int> CreateNextIntUnbounded(ByteGenerator byteGenerator)
        {
            UnboundedGenerator<uint> nextUIntUnbounded = CreateNextUIntUnbounded(byteGenerator);

            return
                () => (int)nextUIntUnbounded();
        }

        /// <summary>
        /// Returns a delegate that is able to generate random
        /// <c>int</c> numbers which are strictly smaller than the specified value.
        /// </summary>
        /// <param name="byteGenerator">
        /// A delegate that fills the passed byte array with random values.
        /// </param>
        /// <returns>
        /// A delegate that wraps around the <paramref name="byteGenerator"/> to produce random <c>int</c> values 
        /// which are strictly smaller than the argument passed to the delegate.
        /// </returns>
        public static UpperBoundedGenerator<int> CreateNextIntUpperBounded(ByteGenerator byteGenerator)
        {
            Func<uint, uint> nextUIntInclusive = ___CreateNextUIntInclusive(byteGenerator);

            return
                ((int maxValue) => (int)nextUIntInclusive((uint)(maxValue - 1)));
        }

        /// <summary>
        /// Returns a delegate that is able to generate random
        /// <c>int</c> numbers in an arbitrary range.
        /// </summary>
        /// <param name="byteGenerator">A delegate that fills the passed byte array with random values.</param>
        /// <returns>
        /// A delegate that wraps around the <paramref name="byteGenerator"/> 
        /// to produce random <c>int</c> values in the range supplied as its argument.
        /// </returns>
        public static BoundedGenerator<int> CreateNextIntBounded(ByteGenerator byteGenerator)
        {
            UpperBoundedGenerator<long> nextLongUpperBounded = CreateNextLongUpperBounded(byteGenerator);

            return ((int minValue, int maxValue) => 
                minValue + (int)nextLongUpperBounded((long)maxValue - minValue));
        }

        // ---------------------------
        // ------- ULONG -------------
        // ---------------------------

        /// <summary>
        /// На основе генератора случайных байтов возвращает 
        /// генератор ulong, который дает числа не больше заданного значения.
        /// </summary>
        private static Func<ulong, ulong> ___CreateNextULongInclusive(ByteGenerator byteGenerator)
        {
            return delegate(ulong maxValue)
            {
                // maxvalue - IS INCLUSIVE.

                if (maxValue == 0)
                    return 0;

                ulong savedMaxValue = maxValue;

                int wholeBytes = 0;     // количество байт, которое можно ничтоже сумняшеся заполнять полностью
                int tailBits = 0;       // а вот эту штучку полностью нельзя

                // ON DEBUG
                // Console.WriteLine(BitConverter.ToString(BitConverter.GetBytes(maxValue)));

                // 10000000|100000000|       257[10] 
                // 00101011|111111111|       X[10]

                while (maxValue > 0)
                {
                    ++tailBits;

                    if (tailBits == 8)
                    {
                        ++wholeBytes;
                        tailBits = 0;
                    }

                    maxValue >>= 1;
                }

            REPEAT:

                byte[] buffer = new byte[8];
                byteGenerator(buffer);

                // Все старшие разряды, 
                // идущие больше целого числа байтов,
                // должны быть занулены.

                for (int i = wholeBytes + 1; i < 8; i++)
                    buffer[i] = 0;

                if (wholeBytes < 8)
                {
                    if (tailBits > 0)
                    {
                        // tailbits = 1 --> mask = 00000001
                        // tailbits = 3 --> mask = 00000111

                        byte mask = 1;

                        for (int j = 1; j < tailBits; j++)
                        {
                            mask <<= 1;
                            mask += 1;
                        }

                        buffer[wholeBytes] &= mask;
                    }
                    else
                        buffer[wholeBytes] = 0;
                }

                ulong sampledValue = BitConverter.ToUInt64(buffer, 0);

                if (sampledValue >= savedMaxValue)
                    goto REPEAT;

                return sampledValue;
            };
        }

        /// <summary>
        /// Returns a delegate that is able to generate random
        /// <c>ulong</c> numbers in the whole range of <c>ulong</c> numeric type.
        /// </summary>
        /// <param name="byteGenerator">A delegate that fills the passed byte array with random values.</param>
        /// <returns>A delegate that wraps around the <paramref name="byteGenerator"/> to produce random <c>ulong</c> values in the whole range of <c>ulong</c> numeric type.</returns>
        public static UnboundedGenerator<ulong> CreateNextULongUnbounded(ByteGenerator byteGenerator)
        {
            return delegate
            {
                byte[] buffer = new byte[8];
                byteGenerator(buffer);

                return BitConverter.ToUInt64(buffer, 0);
            };
        }

        /// <summary>
        /// Returns a delegate that is able to generate random
        /// <c>ulong</c> numbers which are strictly smaller than the specified value.
        /// </summary>
        /// <param name="byteGenerator">A delegate that fills the passed byte array with random values.</param>
        /// <returns>
        /// A delegate that wraps around the <paramref name="byteGenerator"/> to produce random <c>ulong</c> values 
        /// which are strictly smaller than the argument passed to the delegate.
        /// </returns>
        public static UpperBoundedGenerator<ulong> CreateNextULongUpperBounded(ByteGenerator byteGenerator)
        {
            Func<ulong, ulong> nextULongInclusive = ___CreateNextULongInclusive(byteGenerator);

            return
                maxValue => nextULongInclusive(maxValue - 1);
        }

        /// <summary>
        /// Returns a delegate that is able to generate random
        /// <c>ulong</c> numbers in an arbitrary range.
        /// </summary>
        /// <param name="byteGenerator">A delegate that fills the passed byte array with random values.</param>
        /// <returns>A delegate that wraps around the <paramref name="byteGenerator"/> to produce random <c>ulong</c> values 
        /// in the specified range.</returns>
        public static BoundedGenerator<ulong> CreateNextULongBounded(ByteGenerator byteGenerator)
        {
            Func<ulong, ulong> nextULongInclusive = ___CreateNextULongInclusive(byteGenerator);

            return
                (minValue, maxValue) => minValue + nextULongInclusive(maxValue - minValue - 1);
        }

        /// <summary>
        /// Returns a delegate that is able to generate random
        /// <c>long</c> numbers in an arbitrary range.
        /// </summary>
        /// <param name="byteGenerator">A delegate that fills the passed byte array with random values.</param>
        /// <returns>A delegate that wraps around the <paramref name="byteGenerator"/> to produce random <c>ulong</c> values in the whole range of <c>long</c> numeric type.</returns>
        public static UnboundedGenerator<long> CreateNextLongUnbounded(ByteGenerator byteGenerator)
        {
            UnboundedGenerator<ulong> nextULongUnbounded = CreateNextULongUnbounded(byteGenerator);

            return
                () => (long)nextULongUnbounded();
        }

        /// <summary>
        /// Returns a delegate that is able to generate random
        /// <c>long</c> numbers which are strictly smaller than the specified value.
        /// </summary>
        /// <param name="byteGenerator">A delegate that fills the passed byte array with random values.</param>
        /// <returns>
        /// A delegate that wraps around the <paramref name="byteGenerator"/> to produce random <c>long</c> values 
        /// which are strictly smaller than the argument passed to the delegate.
        /// </returns>
        public static UpperBoundedGenerator<long> CreateNextLongUpperBounded(ByteGenerator byteGenerator)
        {
            Func<ulong, ulong> nextULongInclusive = ___CreateNextULongInclusive(byteGenerator);

            return
                ((long maxValue) => (long)nextULongInclusive((ulong)(maxValue - 1)));
        }

        /// <summary>
        /// Returns a delegate that is able to generate random
        /// <c>long</c> numbers in an arbitrary range.
        /// </summary>
        /// <param name="byteGenerator">A delegate that fills the passed byte array with random values.</param>
        /// <returns>
        /// A delegate that wraps around the <paramref name="byteGenerator"/> 
        /// to produce random <c>long</c> values in the range supplied as its argument.
        /// </returns>
        public static BoundedGenerator<long> CreateNextLongBounded(ByteGenerator byteGenerator)
        {
            Func<ulong, ulong> nextULongInclusive = ___CreateNextULongInclusive(byteGenerator);

            return delegate(long minValue, long maxValue)
            {
                // Если оба числа лежат по одну сторону от ноля,
                // то ничего страшного не случится, переполнения при вычитании не будет.

                if (minValue >= 0 || maxValue < 0)
                    return minValue + (long)nextULongInclusive((ulong)(maxValue - minValue - 1));

                else
                {
                    // maxValue по-любому больше нуля, а minValue по-любому меньше
                    // Отдельно обрабатываем случай, когда - от минимума даст переполнение в типе long

                    if (minValue == long.MinValue)
                    {
                        ulong tmp = nextULongInclusive((ulong)maxValue + 9223372036854775808 - 1);

                        if (tmp > 9223372036854775808)  // если больше minValue, можно безопасно вычитать, получится положительное число
                            return (long)(tmp - 9223372036854775808);

                        else
                            return -(long)(9223372036854775808 - tmp);
                    }
                    else
                    {
                        // as soon as minValue is not long.Minvalue, expression -minValue 
                        // will not overflow

                        ulong minusMinimum = (ulong)(-minValue);

                        ulong tmp = nextULongInclusive((ulong)maxValue + minusMinimum - 1);

                        if (tmp > minusMinimum)
                            return (long)(tmp - minusMinimum);

                        else
                            return -(long)(minusMinimum - tmp);
                    }
                }
            };
        }
    }
}
